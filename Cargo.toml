[workspace]

[package]
name = "threatflux-threat-detection"
version = "0.1.0"
edition = "2021"
rust-version = "1.75.0"
authors = ["ThreatFlux Team"]
description = "Comprehensive threat detection library with YARA integration and malware analysis"
license = "MIT"
repository = "https://github.com/ThreatFlux/threatflux-threat-detection"
keywords = ["threat", "detection", "yara", "malware", "security"]
categories = ["cryptography", "network-programming", "development-tools"]
# readme = "README.md"

[features]
default = ["pattern-matching", "builtin-rules", "serde-support"]
yara-engine = ["yara-x"]
clamav-engine = ["clamav-rs"]  # Optional feature, disabled by default due to system dependency requirements
pattern-matching = ["aho-corasick", "regex"]
rule-management = ["git2", "reqwest"]
builtin-rules = []
metrics = ["prometheus"]
async-scanning = []  # Always available since tokio is always included
serde-support = ["serde", "serde_json"]
# System dependency features (optional for cross-platform compatibility)
system-yara = ["yara-engine"]
system-clamav = ["clamav-engine"]

[dependencies]
# Core dependencies
anyhow = "1.0"
thiserror = "1.0"
log = "0.4"
walkdir = "2.3"
async-trait = "0.1"

# Detection engines (with proper error handling for system dependencies)
yara-x = { version = "0.9", optional = true }
clamav-rs = { version = "0.5", optional = true, default-features = false }

# Pattern matching (optional)
aho-corasick = { version = "1.1", optional = true }
regex = { version = "1.10", optional = true }

# Rule management (optional)
git2 = { version = "0.20", optional = true }
reqwest = { version = "0.12", features = ["json"], optional = true }

# Async support (always required for async-trait)
tokio = { version = "1.0", features = ["rt", "rt-multi-thread", "macros", "fs", "io-util"], optional = false }

# Serialization (optional)
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }

# Metrics (optional)
prometheus = { version = "0.14", optional = true }

# Utilities
chrono = { version = "0.4", features = ["serde"] }
uuid = { version = "1.8", features = ["v4"] }

[dev-dependencies]
tempfile = "3.0"
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.0"
tokio-test = "0.4"
# Testing utilities
rstest = "0.26"
pretty_assertions = "1.4"
test-case = "3.3"
serial_test = "3.0"
once_cell = "1.19"
env_logger = "0.11"
# Async testing
futures = "0.3"
# Mock and test data
rand = "0.8"

# Examples and benchmarks currently disabled - files not implemented yet
# [[example]]
# name = "basic_scanning"
# path = "examples/basic_scanning.rs"
#
# [[example]]
# name = "rule_management" 
# path = "examples/rule_management.rs"
# required-features = ["rule-management"]
#
# [[example]]
# name = "async_scanning"
# path = "examples/async_scanning.rs"
# required-features = ["async-scanning"]
#
# [[bench]]
# name = "scanning_performance"
# path = "benches/scanning_performance.rs"
# harness = false
#
# [[bench]]
# name = "rule_compilation"
# path = "benches/rule_compilation.rs"
# harness = false