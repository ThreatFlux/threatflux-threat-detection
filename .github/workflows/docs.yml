name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'README.md'
      - 'Cargo.toml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'README.md'
      - 'Cargo.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:
  schedule:
    # Rebuild docs weekly to catch any issues
    - cron: '0 4 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUSTDOCFLAGS: -D warnings

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Install cargo-readme
      run: cargo install cargo-readme

    - name: Generate README from lib.rs
      run: |
        cargo readme > README_generated.md
        
        # Compare with existing README and warn if different
        if ! diff README.md README_generated.md > /dev/null 2>&1; then
          echo "‚ö†Ô∏è README.md differs from generated version. Consider updating."
          echo "Differences:"
          diff README.md README_generated.md || true
        else
          echo "‚úÖ README.md is up to date with lib.rs documentation."
        fi

    - name: Build documentation
      run: |
        # Build docs with all features
        cargo doc --all-features --no-deps --document-private-items
        
        # Build docs without default features
        cargo doc --no-default-features --no-deps --document-private-items
        
        # Test documentation examples
        cargo test --doc --all-features

    - name: Check documentation coverage
      run: |
        # Generate documentation coverage report
        cargo +nightly doc --all-features --no-deps -Z unstable-options --show-coverage --document-private-items || true
        
        # Check for missing documentation
        echo "Checking for undocumented public items..."
        cargo doc --all-features --no-deps 2>&1 | grep -i "missing" || echo "‚úÖ No missing documentation warnings found."

    - name: Validate examples
      run: |
        echo "Validating documentation examples..."
        
        # Run all examples to ensure they compile and work
        for example in examples/*.rs; do
          if [ -f "$example" ]; then
            echo "Testing example: $example"
            cargo run --example "$(basename "$example" .rs)" --all-features
          fi
        done

    - name: Generate documentation artifacts
      run: |
        # Create docs archive
        tar -czf docs.tar.gz -C target/doc .
        
        # Generate a simple index page
        cat > target/doc/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>ThreatFlux Hashing Documentation</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                .link { display: block; margin: 10px 0; padding: 10px; background: #f5f5f5; text-decoration: none; color: #333; }
                .link:hover { background: #e5e5e5; }
            </style>
        </head>
        <body>
            <h1>ThreatFlux Hashing Documentation</h1>
            <a href="threatflux_hashing/index.html" class="link">üìö API Documentation</a>
            <a href="../README.html" class="link">üìñ README</a>
            <a href="https://crates.io/crates/threatflux-hashing" class="link">üì¶ Crates.io</a>
        </body>
        </html>
        EOF
        
        # Convert README to HTML
        if command -v pandoc >/dev/null 2>&1; then
          pandoc README.md -o target/doc/README.html
        fi

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          target/doc/
          docs.tar.gz

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build documentation for deployment
      run: |
        cargo doc --all-features --no-deps
        
        # Create a comprehensive index page
        cat > target/doc/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ThreatFlux Hashing Documentation</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    margin: 0; padding: 40px; 
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }
                .container { 
                    max-width: 800px; margin: 0 auto; 
                    background: white; padding: 40px; 
                    border-radius: 10px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                }
                h1 { color: #333; text-align: center; margin-bottom: 40px; }
                .description { text-align: center; color: #666; margin-bottom: 40px; font-size: 18px; }
                .links { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
                .link { 
                    display: block; padding: 20px; background: #f8f9fa; 
                    text-decoration: none; color: #333; border-radius: 8px;
                    transition: transform 0.2s, box-shadow 0.2s;
                }
                .link:hover { 
                    transform: translateY(-5px); 
                    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                }
                .link-title { font-weight: bold; margin-bottom: 10px; }
                .link-desc { color: #666; font-size: 14px; }
                .badges { text-align: center; margin-top: 40px; }
                .badges img { margin: 0 5px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîê ThreatFlux Hashing</h1>
                <div class="description">
                    High-performance async file hashing library for Rust<br>
                    Supporting MD5, SHA256, SHA512, and BLAKE3
                </div>
                
                <div class="links">
                    <a href="threatflux_hashing/index.html" class="link">
                        <div class="link-title">üìö API Documentation</div>
                        <div class="link-desc">Complete API reference with examples</div>
                    </a>
                    
                    <a href="https://crates.io/crates/threatflux-hashing" class="link">
                        <div class="link-title">üì¶ Crates.io</div>
                        <div class="link-desc">Download and installation instructions</div>
                    </a>
                    
                    <a href="https://github.com/ThreatFlux/threatflux-hashing" class="link">
                        <div class="link-title">üîó GitHub Repository</div>
                        <div class="link-desc">Source code, issues, and contributions</div>
                    </a>
                </div>
                
                <div class="badges">
                    <img src="https://img.shields.io/crates/v/threatflux-hashing.svg" alt="Crates.io">
                    <img src="https://img.shields.io/crates/d/threatflux-hashing.svg" alt="Downloads">
                    <img src="https://img.shields.io/crates/l/threatflux-hashing.svg" alt="License">
                    <img src="https://github.com/ThreatFlux/threatflux-hashing/workflows/CI/badge.svg" alt="CI">
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Add custom CSS for rustdoc
        cat > target/doc/custom.css << 'EOF'
        /* Custom theme for ThreatFlux documentation */
        :root {
            --main-color: #667eea;
            --link-color: #764ba2;
        }
        
        .sidebar .logo-container {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .sidebar .logo-container::before {
            content: "üîê";
            font-size: 2em;
            display: block;
        }
        EOF

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: target/doc

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  link-checker:
    name: Check Documentation Links
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - uses: actions/checkout@v4

    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: documentation

    - name: Install lychee (link checker)
      run: |
        curl -L https://github.com/lycheeverse/lychee/releases/latest/download/lychee-x86_64-unknown-linux-gnu.tar.gz | tar -xz
        sudo mv lychee /usr/local/bin/

    - name: Check documentation links
      run: |
        # Check links in generated documentation
        lychee --accept 200,429 target/doc/**/*.html || echo "Some links may be broken"
        
        # Check links in README
        lychee README.md || echo "Some README links may be broken"

  spell-check:
    name: Spell Check Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Check spelling in documentation
      uses: streetsidesoftware/cspell-action@v6
      with:
        files: |
          README.md
          src/**/*.rs
          examples/**/*.rs
        config: |
          {
            "version": "0.2",
            "language": "en",
            "words": [
              "threatflux", "hasher", "blake3", "tokio", "async", "rustdoc",
              "crates", "repo", "clippy", "rustfmt", "stdlib", "dirs", "pathbuf"
            ]
          }