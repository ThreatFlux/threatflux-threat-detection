name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_name: ${{ steps.get_version.outputs.tag_name }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="${VERSION}"
        else
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG_NAME#v}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "Releasing version: ${VERSION}"
        echo "Tag name: ${TAG_NAME}"

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Validate Cargo.toml version
      run: |
        CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        if [ "$CARGO_VERSION" != "${{ steps.get_version.outputs.version }}" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION but tag/input has ${{ steps.get_version.outputs.version }}"
          exit 1
        fi

    - name: Run tests
      run: |
        cargo test --all-features
        cargo test --no-default-features

    - name: Check formatting and linting
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-features -- -D warnings

  build-and-test:
    name: Build and Test
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: threatflux-hashing-linux
          - os: windows-latest
            artifact_name: threatflux-hashing-windows
          - os: macos-latest
            artifact_name: threatflux-hashing-macos

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build release
      run: cargo build --release --all-features

    - name: Run comprehensive tests
      run: |
        cargo test --release --all-features
        cargo test --release --no-default-features

    - name: Run benchmarks
      run: cargo bench --bench hash_benchmarks

  publish-crate:
    name: Publish to Crates.io
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Publish to Crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: cargo publish --all-features

  create-release:
    name: Create GitHub Release
    needs: [validate, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 "${{ needs.validate.outputs.tag_name }}^" 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" "$PREV_TAG..${{ needs.validate.outputs.tag_name }}")
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # ThreatFlux Hashing ${{ needs.validate.outputs.version }}
        
        ## Changes
        
        $CHANGELOG
        
        ## Installation
        
        Add this to your \`Cargo.toml\`:
        
        \`\`\`toml
        [dependencies]
        threatflux-hashing = "${{ needs.validate.outputs.version }}"
        \`\`\`
        
        ## Documentation
        
        - [Crates.io](https://crates.io/crates/threatflux-hashing)
        - [docs.rs](https://docs.rs/threatflux-hashing/${{ needs.validate.outputs.version }})
        EOF

    - name: Build documentation package
      run: |
        cargo doc --all-features --no-deps
        tar -czf docs.tar.gz -C target/doc .

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.tag_name }}
        name: ThreatFlux Hashing ${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        files: |
          docs.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true

  update-docs:
    name: Update Documentation
    needs: [create-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: threatflux-hashing.docs.example.com  # Replace with your domain if applicable