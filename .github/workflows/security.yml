name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run cargo audit
      run: cargo audit --json --output audit-results.json

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-results
        path: audit-results.json

    - name: Check for vulnerabilities
      run: |
        if [ -s audit-results.json ]; then
          echo "Security vulnerabilities found!"
          cat audit-results.json
          exit 1
        else
          echo "No security vulnerabilities found."
        fi

  clippy-security:
    name: Security-focused Clippy
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy
        cache: true

    - name: Run security-focused clippy lints
      run: |
        cargo clippy --all-features --all-targets -- \
          -W clippy::unwrap_used \
          -W clippy::expect_used \
          -W clippy::panic \
          -W clippy::unimplemented \
          -W clippy::todo \
          -W clippy::unreachable \
          -W clippy::integer_arithmetic \
          -W clippy::float_arithmetic \
          -W clippy::indexing_slicing \
          -W clippy::as_conversions \
          -W clippy::lossy_float_literal \
          -W clippy::mem_forget \
          -W clippy::fn_to_numeric_cast \
          -W clippy::fn_to_numeric_cast_with_truncation \
          -W clippy::cast_possible_truncation \
          -W clippy::cast_possible_wrap \
          -W clippy::cast_sign_loss \
          -W clippy::cast_precision_loss \
          -W clippy::shadow_unrelated \
          -W clippy::shadow_reuse \
          -W clippy::shadow_same \
          -W clippy::print_stdout \
          -W clippy::print_stderr \
          -W clippy::dbg_macro \
          -A clippy::module_name_repetitions

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-ghsas: GHSA-1234-5678-9012  # Add specific GHSA IDs to allow if needed

  cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Install cargo-deny
      run: cargo install cargo-deny

    - name: Create deny.toml if it doesn't exist
      run: |
        if [ ! -f deny.toml ]; then
          cat > deny.toml << 'EOF'
        [licenses]
        # Allow common open source licenses
        allow = [
            "MIT",
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "BSD-2-Clause",
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        # Deny problematic licenses
        deny = [
            "GPL-3.0",
            "AGPL-3.0",
            "LGPL-3.0",
        ]
        
        [bans]
        # Deny specific crates
        deny = [
            { name = "openssl", use-instead = "rustls" },
            { name = "openssl-sys", use-instead = "rustls" },
        ]
        # Allow duplicate dependencies for build tools
        skip = []
        
        [advisories]
        # Advisory database configuration
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/RustSec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "warn"
        unsound = "warn"
        yanked = "warn"
        notice = "warn"
        
        [sources]
        # Only allow crates from crates.io
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        allow-git = []
        EOF
        fi

    - name: Check licenses, bans, advisories, and sources
      run: cargo deny check

  semver-checks:
    name: Semantic Versioning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Install cargo-semver-checks
      run: cargo install cargo-semver-checks

    - name: Check for breaking changes
      run: cargo semver-checks check-release

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Generate SBOM
      run: |
        cargo tree --format "{p} {l}" --all-features > sbom.txt
        cargo tree --format "{p}" --all-features --edges normal > dependencies.txt

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: software-bill-of-materials
        path: |
          sbom.txt
          dependencies.txt

    - name: Check for suspicious dependencies
      run: |
        # Check for dependencies with suspicious names or patterns
        if grep -i -E "(backdoor|malware|virus|trojan|keylog|steal|hack)" dependencies.txt; then
          echo "Suspicious dependency names detected!"
          exit 1
        fi
        
        # Check for too many dependencies (potential supply chain bloat)
        DEPENDENCY_COUNT=$(wc -l < dependencies.txt)
        if [ "$DEPENDENCY_COUNT" -gt 100 ]; then
          echo "Warning: High number of dependencies ($DEPENDENCY_COUNT). Consider reducing dependency footprint."
        fi

  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  code-ql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: rust
        queries: security-and-quality

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        cache: true

    - name: Build for CodeQL
      run: cargo build --all-features

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:rust"