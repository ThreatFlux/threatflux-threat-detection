name: CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

    # System dependencies removed - using safe feature combinations only

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b  # v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-

    - name: Check code formatting
      run: cargo fmt -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run clippy
      run: cargo clippy --all-targets --features "default" -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build with default features
      run: cargo build --verbose

    - name: Build with safe features
      run: cargo build --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support" --verbose

    - name: Build with no default features
      run: cargo build --no-default-features --verbose

    - name: Run tests with default features
      run: cargo test --verbose

    - name: Run tests with safe features
      run: cargo test --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support" --verbose

    - name: Run tests with no default features
      run: cargo test --no-default-features --verbose

    - name: Run examples
      run: |
        cargo run --example basic_usage
        cargo run --example custom_entry
        cargo run --example file_scanner_migration
      if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'

  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install criterion
      run: cargo install cargo-criterion || true

    - name: Run benchmarks
      run: cargo criterion --message-format=json > benchmark-results.json || true
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json
      if: always()

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support" --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain (1.70.0 - Tokio requirement)
      uses: dtolnay/rust-toolchain@1.70.0

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}

    - name: Check MSRV
      run: cargo check --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support"

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-deny
      run: cargo install cargo-deny || true

    - name: Check dependencies
      run: cargo deny check || true
      continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target
        key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Run integration tests
      run: |
        cargo test --test integration_test --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support" -- --nocapture
        cargo test --test detector_test --features "default,yara-engine,pattern-matching,rule-management,metrics,async-scanning,serde-support" -- --nocapture

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, coverage, msrv, check-dependencies]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.msrv.result }}" = "success" ]; then
          echo "✅ All required checks passed"
          exit 0
        else
          echo "❌ Some required checks failed"
          exit 1
        fi